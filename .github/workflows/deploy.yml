name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          FLASK_CONFIG: production
          FLASK_APP: app.py
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          VITE_API_URL: ${{ secrets.EC2_HOST }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: FLASK_CONFIG, FLASK_APP, DATABASE_URL, JWT_SECRET_KEY, VITE_API_URL
          script: |
            echo "Starting deployment..."

            # Create app directory if it doesn't exist
            mkdir -p ~/app
            cd ~/app

            # Clone repo if it's the first time, otherwise pull
            if [ ! -d ".git" ]; then
              git clone https://github.com/npatel98/DTSA5714-Web-Application.git .
            else
              git pull origin main
            fi

            # Install Node.js and npm if not present
            if ! command -v node &> /dev/null; then
                echo "Installing Node.js..."
                curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                sudo apt-get install -y nodejs
            fi

            # Set up Python virtual environment in backend directory
            cd backend
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            # Activate virtual environment and update dependencies
            source venv/bin/activate

            # Install Python dependencies
            pip install -r requirements.txt

            # Run database migrations
            echo "Running database migrations..."
            source venv/bin/activate
            if ! flask db upgrade; then
                echo "ERROR: Database migration failed"
                exit 1
            fi
            echo "Database migrations completed successfully"

            # Build frontend first
            echo "Building frontend..."
            cd ../frontend
            npm ci
            if ! npm run build; then
                echo "ERROR: Frontend build failed"
                exit 1
            fi
            echo "Frontend build completed successfully"

            # Configure nginx (remove duplicates)
            echo "Configuring nginx..."
            sudo tee /etc/nginx/sites-available/expense-tracker << EOF
            server {
                listen 80;
                listen [::]:80;
                
                root /home/ubuntu/app/frontend/dist;
                index index.html;
              

                # Security headers
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-XSS-Protection "1; mode=block" always;
                add_header X-Content-Type-Options "nosniff" always;

                # Frontend - serve static files
                location / {
                    try_files $uri $uri/ /index.html;
                    expires 1h;
                    add_header Cache-Control "public, immutable";
                }

                # Backend API
                location /api/ {
                    proxy_pass http://127.0.0.1:5000/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_connect_timeout 30s;
                    proxy_send_timeout 30s;
                    proxy_read_timeout 30s;
                }

                # Health check endpoint
                location /health {
                    proxy_pass http://127.0.0.1:5000/health;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                }
            }
            EOF

            # Remove default nginx site and enable our site
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo ln -sf /etc/nginx/sites-available/expense-tracker /etc/nginx/sites-enabled/

            # Test nginx configuration
            echo "Testing nginx configuration..."
            if ! sudo nginx -t; then
                echo "ERROR: nginx configuration test failed"
                exit 1
            fi

            # Stop the service before updating it
            sudo systemctl stop expense-tracker || true

            # Create systemd service file
            echo "Creating systemd service file..."
            sudo tee /etc/systemd/system/expense-tracker.service << EOF
            [Unit]
            Description=Expense Tracker Flask Application
            After=network.target

            [Service]
            User=ubuntu
            Group=ubuntu
            WorkingDirectory=/home/ubuntu/app/backend
            Environment="PATH=/home/ubuntu/app/backend/venv/bin"
            Environment="FLASK_APP=${FLASK_APP}"
            Environment="FLASK_CONFIG=${FLASK_CONFIG}"
            Environment="DATABASE_URL=${DATABASE_URL}"
            Environment="JWT_SECRET_KEY=${JWT_SECRET_KEY}"
            ExecStart=/home/ubuntu/app/backend/venv/bin/gunicorn -w 4 -b 127.0.0.1:5000 app:app --log-level info --access-logfile /var/log/expense-tracker-access.log
            StandardOutput=append:/var/log/expense-tracker.log
            StandardError=append:/var/log/expense-tracker.error.log
            Restart=always
            RestartSec=3
            KillMode=mixed
            TimeoutStopSec=5

            [Install]
            WantedBy=multi-user.target
            EOF

            # Create log files and set permissions
            sudo touch /var/log/expense-tracker.log /var/log/expense-tracker.error.log /var/log/expense-tracker-access.log
            sudo chown ubuntu:ubuntu /var/log/expense-tracker*.log

            # Set proper permissions for frontend files
            sudo chown -R ubuntu:ubuntu /home/ubuntu/app/frontend/dist
            sudo chmod -R 755 /home/ubuntu/app/frontend/dist

            # Reload and start services
            sudo systemctl daemon-reload
            sudo systemctl enable expense-tracker
            sudo systemctl start expense-tracker

            # Wait a moment for the service to start
            sleep 5

            # Check if the service started successfully
            if ! sudo systemctl is-active --quiet expense-tracker; then
                echo "ERROR: Flask service failed to start"
                sudo systemctl status expense-tracker
                sudo tail -20 /var/log/expense-tracker.error.log
                exit 1
            fi

            # Test backend connectivity
            echo "Testing backend connectivity..."
            if ! curl -f http://127.0.0.1:5000/health 2>/dev/null; then
                echo "WARNING: Backend health check failed, but continuing..."
            fi

            # Restart nginx
            sudo systemctl restart nginx

            # Final verification
            if ! sudo systemctl is-active --quiet nginx; then
                echo "ERROR: nginx failed to start"
                sudo systemctl status nginx
                exit 1
            fi

            echo "Deployment completed successfully"
            echo "Service status:"
            sudo systemctl status expense-tracker --no-pager -l
            echo "Nginx status:"
            sudo systemctl status nginx --no-pager -l
