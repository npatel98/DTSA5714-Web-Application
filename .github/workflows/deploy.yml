name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          FLASK_CONFIG: production
          FLASK_APP: app.py
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          VITE_API_URL: ${{ secrets.EC2_HOST }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          envs: FLASK_CONFIG, FLASK_APP, DATABASE_URL, JWT_SECRET_KEY, VITE_API_URL
          script: |
            echo "Starting deployment..."

            # Create app directory if it doesn't exist
            mkdir -p ~/app
            cd ~/app

            # Clone repo if it's the first time, otherwise pull
            if [ ! -d ".git" ]; then
              git clone https://github.com/npatel98/DTSA5714-Web-Application.git .
            else
              git pull origin main
            fi

            # Install Node.js and npm if not present
            if ! command -v node &> /dev/null; then
                echo "Installing Node.js..."
                curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                sudo apt-get install -y nodejs
            fi

            # Backend setup
            cd backend

            # Set up Python virtual environment in backend directory
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            # Activate virtual environment and update dependencies
            source venv/bin/activate
            pip install -r requirements.txt

            # Run database migrations
            echo "Running database migrations..."
            source venv/bin/activate
            if ! flask db upgrade; then
                echo "ERROR: Database migration failed"
                exit 1
            fi
            echo "Database migrations completed successfully"

            # Build frontend
            echo "Building frontend..."
            cd ../frontend
            npm ci
            if ! npm run build; then
                echo "ERROR: Frontend build failed"
                exit 1
            fi
            echo "Frontend build completed successfully"

            # Set proper permissions for frontend files
            sudo chown -R ubuntu:ubuntu /home/ubuntu/app/frontend/dist
            sudo chmod -R 755 /home/ubuntu/app/frontend/dist

            # Reload and restart services
            sudo systemctl daemon-reload
            sudo systemctl restart expense-tracker

            # Wait a moment for the service to start
            sleep 5

            # Check if the service started successfully
            if ! sudo systemctl is-active --quiet expense-tracker; then
                echo "ERROR: Flask service failed to start"
                sudo systemctl status expense-tracker
                sudo tail -20 /var/log/expense-tracker.error.log
                exit 1
            fi

            # Restart nginx to pick up any new static files
            sudo systemctl restart nginx

            echo "Deployment completed successfully!"
            echo "Service status:"
            sudo systemctl status expense-tracker --no-pager -l
