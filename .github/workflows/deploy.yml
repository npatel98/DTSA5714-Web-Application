name: Deploy Expense Tracker Application

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt
          cd ..

      - name: Run tests
        run: |
          cd backend
          python -m unittest discover -s tests -p "test_*.py" -v

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt
          cd ..

      - name: Build React frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
        env:
          FLASK_CONFIG: production
          FLASK_APP: app.py
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          VITE_API_URL: http://${{ secrets.VITE_API_URL }}/api
          script: |
            # Create app directory if it doesn't exist
            mkdir -p ~/app
            cd ~/app

            # Clone repo if it's the first time, otherwise pull
            if [ ! -d ".git" ]; then
              git clone https://github.com/npatel98/DTSA5714-Web-Application.git .
            else
              git pull origin main
            fi

            # Set up Python virtual environment if it doesn't exist
            if [ ! -d "backend/venv" ]; then
              python3 -m venv backend/venv
            fi

            # Activate virtual environment and update dependencies
            source backend/venv/bin/activate
            cd backend
            pip install -r requirements.txt

            # Run database migrations
            echo "Running database migrations..."
            if ! flask db upgrade; then
                echo "ERROR: Database migration failed"
                exit 1
            fi
            echo "Database migrations completed successfully"

            # Configure nginx
            echo "Configuring nginx..."
            sudo tee /etc/nginx/sites-available/expense-tracker << EOF
            server {
                listen 80;
                server_name ${VITE_API_URL};

                # Frontend
                location / {
                    root /home/ubuntu/app/frontend/dist;
                    try_files \$uri \$uri/ /index.html;
                }

                # Backend API
                location /api/ {
                    proxy_pass http://127.0.0.1:5000/;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                }
            }
            EOF

            # Enable nginx site
            sudo ln -sf /etc/nginx/sites-available/expense-tracker /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl restart nginx

            # Create systemd service file if it doesn't exist
            echo "Creating systemd service file..."
            sudo tee /etc/systemd/system/expense-tracker.service << EOF
            [Unit]
            Description=Expense Tracker Flask Application
            After=network.target

            [Service]
            User=ubuntu
            WorkingDirectory=/home/ubuntu/app/backend
            Environment="PATH=/home/ubuntu/app/backend/venv/bin"
            Environment="FLASK_APP=${FLASK_APP}"
            Environment="FLASK_CONFIG=${FLASK_CONFIG}"
            Environment="DATABASE_URL=${DATABASE_URL}"
            Environment="JWT_SECRET_KEY=${JWT_SECRET_KEY}"
            ExecStart=/home/ubuntu/app/backend/venv/bin/gunicorn -w 4 -b 127.0.0.1:5000 app:app

            [Install]
            WantedBy=multi-user.target
            EOF
            echo "Systemd service file created successfully"

            # Reload systemd and restart service
            sudo systemctl daemon-reload
            sudo systemctl enable expense-tracker
            sudo systemctl restart expense-tracker

            # Build and deploy frontend
            echo "Building and deploying frontend..."
            cd ../frontend
            npm ci
            npm run build

            echo "Deployment completed successfully"
