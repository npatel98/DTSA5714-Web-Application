name: Deploy Expense Tracker Application to EC2

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt
          cd ..

      - name: Run tests
        run: |
          cd backend
          python -m unittest discover -s tests -p "test_*.py" -v

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build React frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        env:
          FLASK_CONFIG: production
          FLASK_APP: app.py
          PRODUCTION_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Create app directory if it doesn't exist
            mkdir -p ~/app
            cd ~/app

            # Clone repo if it's the first time, otherwise pull
            if [ ! -d ".git" ]; then
              git clone https://github.com/npatel98/DTSA5714-Web-Application.git
            else
              git pull origin main
            fi

            # Set up Python virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            # Activate virtual environment and update dependencies
            source venv/bin/activate
            pip install -r requirements.txt

            # Run database migrations
            echo "Running database migrations..."
            flask db upgrade
            echo "Database migrations completed"

            # Build and deploy frontend (if frontend directory exists)
            if [ -d "frontend" ]; then
              cd frontend
              npm ci
              npm run build
              cd ..
            fi

            pkill -f "python.*app.py" || echo "No existing Flask process found"
            nohup python app.py > app.log 2>&1 &
            echo "Flask app started in background"
            echo "Deployment completed successfully"
